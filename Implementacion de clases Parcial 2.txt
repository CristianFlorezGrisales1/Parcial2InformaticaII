#include <iostream>
#include <string>

using namespace std;


// Clase Ficha
class Ficha {
    
    // Atributos
    string color;
    pair<int, int> posicion;
    
    // Constructor
    Ficha(string color, pair<int, int> posicion) {
        this->color = color;
        this->posicion = posicion;
    }
};

// Clase HistorialPartidas
class HistorialPartidas {
    
    // Atributos
    vector<pair<string, string>> partidas;
    
    // Métodos
    void agregar_partida(pair<string, string> partida) {
        partidas.push_back(partida);
    }
    
    vector<pair<string, string>> obtener_partidas() {
        return partidas;
    }
};

// Clase OthelloApp
class OthelloApp {
    
    // Atributos
    Ficha** tablero;
    Ficha** jugadores;
    
    // Métodos
    void iniciar() {
        tablero = new Ficha*[8 * 8];
        jugadores = new Ficha*[2];
        for (int i = 0; i < 8 * 8; i++) {
            tablero[i] = new Ficha("Blanco", make_pair(i / 8, i % 8));
        }
        jugadores[0] = new Ficha("Blanco", make_pair(3, 3));
        jugadores[1] = new Ficha("Negro", make_pair(4, 4));
    }
    
    void mostrar_tablero() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                cout << tablero[i * 8 + j]->color << " ";
            }
            cout << endl;
        }
    }
    
    pair<int, int> obtener_jugada_jugador() {
        cout << "Jugador " << jugadores[tablero->turno]->color << ", ingresa tu jugada (fila, columna): ";
        int fila, columna;
        cin >> fila >> columna;
        return make_pair(fila, columna);
    }
    
    void jugar_partida() {
        int turno = 0;
        while (!hay_ganador()) {
            pair<int, int> jugada = obtener_jugada_jugador();
            colocar_ficha(jugada.first, jugada.second, tablero->turno);
            voltear_fichas(jugada.first, jugada.second, tablero->turno);
            turno = (turno + 1) % 2;
        }
        
        string ganador = tablero->ganador;
        if (ganador.empty()) {
            cout << "Empate" << endl;
        } else {
            cout << "El ganador es " << ganador << endl;
        }
    }
    
    // Métodos privados
    
    bool hay_ganador() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (tablero[i * 8 + j]->color == "Blanco" && contar_fichas_adyacentes(i, j, "Blanco") >= 5) {
                    return true;
                } else if (tablero[i * 8 + j]->color == "Negro" && contar_fichas_adyacentes(i, j, "Negro") >= 5) {
                    return true;
                }
            }
        }
        return false;
    }
    
    int contar_fichas_adyacentes(int fila, int columna, string color) {
        int contador = 0;
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                if (0 <= fila + i < 8 && 0 <= columna + j < 8) {
                    if (tablero[fila * 8 + columna + i * 8 + j]->color == color) {
                        contador++;
                    }
                }



class Tablero {
private:
    char tableroJuego[8][8];
    int turnoDeJugador = 1;

public:
    // Constructor
    Tablero() {
        inicializar();
    }

    void inicializar() {

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if ((i == 3 && j == 3) || (i == 4 && j == 4)) {
                    tableroJuego[i][j] = 'B';
                } else if ((i == 4 && j == 3) || (i == 3 && j == 4)) {
                    tableroJuego[i][j] = 'N';
                } else {
                    tableroJuego[i][j] = '_';
                }
            }
        }



        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                cout << tableroJuego[i][j]<<" "; // Imprimir un espacio en blanco y agregar un espacio
            }
            cout <<endl; // Saltar a la siguiente línea después de imprimir una fila completa
        }

    }

    void colocarFicha() {
        int columna, fila;
        char ficha;
        // Aquí puedes implementar la lógica para que un jugador coloque una ficha en el tablero.
        cout<<"Ingresa posicion donde quieras la ficha. ejemplo posicon (2,3) fila 2 columna 3):";
        cout<<"fila:";
        cin>>fila;
        cout<<"columna:";
        cin>>columna;
        cout<<"ingrese su fichablanca o negra?:";
        cin>>ficha;
        tableroJuego[fila][columna]=ficha;

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                cout << tableroJuego[i][j]<<" "; // Imprimir un espacio en blanco y agregar un espacio
            }
            cout <<endl; // Saltar a la siguiente línea después de imprimir una fila completa
        }


    }

    /*bool esMovimientoValido(int fila, int columna,char jugador) {
        // verificamos si la casilla esta vacia
        char antijugador;

        if (jugador=='B'){
            antijugador='N';
        }
        if(jugador=='N'){
            antijugador='B';
}

        if((tableroJuego[fila][columna]=='_')&&(tableroJuego[fila-1][columna]==antijugador)&&(tableroJuego[]))

    }

    void revisarTablero() {
        // Aquí puedes implementar la lógica para revisar el estado del tablero.
    }*/

    int obtenerJugadorGanador() {
        int fichasNegras = 0;
        int fichasBlancas = 0;

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (tableroJuego[i][j] == 'N') {
                    fichasNegras++;
                } else if (tableroJuego[i][j] == 'B') {
                    fichasBlancas++;
                }
            }
        }

        cout << "Fichas Negras: " << fichasNegras << endl;
        cout << "Fichas Blancas: " << fichasBlancas << endl;

        if(fichasNegras>fichasBlancas){
            cout<<"El ganador son las fichas Negras";
        }
        if(fichasBlancas>fichasBlancas){
            cout<<"El ganador son las fichas Blancas";
        }
        if(fichasBlancas==fichasNegras){
            cout<<"Empate";
        }


        // Aquí puedes implementar la lógica para determinar al jugador ganador.
        // Puedes retornar el número del jugador ganador o 0 si no hay ganador aún.

    }

    void dimensiones() {
        // Aquí puedes implementar la lógica para obtener las dimensiones del tablero (8x8).
    }
};


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



class Jugador {
private:
    string nombre; // El nombre del jugador.
    string color;  // El color de las fichas del jugador.

public:
    Jugador(const string& nombre, const string& color) {
        this->nombre = nombre;
        this->color = color;
    }
    //  El uso de this-> se utiliza para distinguir entre los atributos de la clase y los argumentos del constructor con el mismo nombre.


};

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class juego{
private:
    string jugadores;
    string turno;
public:

    void turnoSiguiente(){

    }

    string guardar_historial(){

    }
};


int main() {
    Tablero juego;
    juego.colocarFicha();
    juego.obtenerJugadorGanador();

    // Tu código para ejecutar el juego debe ir aquí.

    return 0;
}